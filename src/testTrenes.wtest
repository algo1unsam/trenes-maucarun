import trenes.*

test "Peso máximo de una Locomotora"{
	var locomotora1 = new Locomotora()
	locomotora1.peso(1000)
	locomotora1.arrastreUtil(11000)
	assert.equals(12000,locomotora1.pesoMaxArrastra())
}

test "Cantidad de pasajeros en distintos vagones"{
	var vagon1 = new VagonPasajeros()
	var vagon2 = new VagonPasajeros()
	vagon1.largo(10)
	vagon1.anchoUtil(2)
	vagon2.largo(10)
	vagon2.anchoUtil(3)
	assert.equals(80,vagon1.cantPasajeros())
	assert.equals(100,vagon2.cantPasajeros())
}

test "Total de pasajeros que puede transportar una formación"{
	var formacion = new Formacion()
	var vagon1 = new VagonPasajeros()
	var vagon2 = new VagonPasajeros()
	var vagon3 = new VagonCarga()
	vagon1.largo(10)
	vagon1.anchoUtil(2)
	vagon2.largo(10)
	vagon2.anchoUtil(3)
	vagon3.cargaMax(2000)
	formacion.vagonesTotal().add(vagon1)
	formacion.vagonesTotal().add(vagon2)
	formacion.vagonesTotal().add(vagon3)
	assert.equals(180,formacion.totalPasajeros())
}

test "1. Cantidad de vagones livianos en una formación"{
	var formacion = new Formacion()
	var vagon1 = new VagonPasajeros()
	var vagon2 = new VagonCarga()
	vagon1.largo(10)
	vagon1.anchoUtil(2)
	vagon2.cargaMax(2000)
	formacion.vagonesTotal().add(vagon1)
	formacion.vagonesTotal().add(vagon2)
	assert.equals(1,formacion.vagonesLivianos())
}

test "2. Velocidad máxima de una formación"{
	var formacion = new Formacion()
	var locomotora1 = new Locomotora()
	var locomotora2 = new Locomotora()
	locomotora1.velocidadMax(80)
	locomotora2.velocidadMax(120)
	formacion.locomotoras().add(locomotora1)
	formacion.locomotoras().add(locomotora2)
	assert.equals(80,formacion.velocidadMax())
}

test "3. Una formación es eficiente"{
	var formacion = new Formacion()
	var locomotora1 = new Locomotora()
	var locomotora2 = new Locomotora()
	locomotora1.peso(1000)
	locomotora1.arrastreUtil(4000)
	locomotora2.peso(500)
	locomotora2.arrastreUtil(2000)
	formacion.locomotoras().add(locomotora1)
	formacion.locomotoras().add(locomotora2)
	assert.that(formacion.eficiente())
}

test "4. Una formación puede moverse"{
	var formacion = new Formacion()
	var locomotora1 = new Locomotora()
	var locomotora2 = new Locomotora()
	var vagon1 = new VagonPasajeros()
	var vagon2 = new VagonCarga()
	locomotora1.arrastreUtil(4000)
	locomotora2.arrastreUtil(2000)
	vagon1.largo(5)
	vagon1.anchoUtil(2)
	vagon2.cargaMax(1000)
	formacion.vagonesTotal().add(vagon1)
	formacion.vagonesTotal().add(vagon2)
	formacion.locomotoras().add(locomotora1)
	formacion.locomotoras().add(locomotora2)
	assert.that(formacion.puedeMoverse())
}

test "5.1. Formacion que no puede moverse necesita kilos de empuje"{
	var formacion = new Formacion()
	var locomotora1 = new Locomotora()
	var locomotora2 = new Locomotora()
	var vagon1 = new VagonPasajeros()
	var vagon2 = new VagonCarga()
	locomotora1.arrastreUtil(1000)
	locomotora2.arrastreUtil(2000)
	vagon1.largo(5)
	vagon1.anchoUtil(2)
	vagon2.cargaMax(1000)
	formacion.vagonesTotal().add(vagon1)
	formacion.vagonesTotal().add(vagon2)
	formacion.locomotoras().add(locomotora1)
	formacion.locomotoras().add(locomotora2)
	assert.notThat(formacion.puedeMoverse())
	assert.equals(1360,formacion.empuje())
}

test "5.2. Formacion que ya puede moverse no necesita kilos de empuje"{
	var formacion = new Formacion()
	var locomotora1 = new Locomotora()
	var locomotora2 = new Locomotora()
	var vagon1 = new VagonPasajeros()
	var vagon2 = new VagonCarga()
	locomotora1.arrastreUtil(4000)
	locomotora2.arrastreUtil(2000)
	vagon1.largo(5)
	vagon1.anchoUtil(2)
	vagon2.cargaMax(1000)
	formacion.vagonesTotal().add(vagon1)
	formacion.vagonesTotal().add(vagon2)
	formacion.locomotoras().add(locomotora1)
	formacion.locomotoras().add(locomotora2)
	assert.that(formacion.puedeMoverse())
	assert.equals(0,formacion.empuje())
}

test "6.1 Chequeo de que method VagonMasPesado() de Formacion funciona"{
	var formacion1 = new Formacion()
	var formacion2 = new Formacion()
	var vagon1 = new VagonPasajeros()
	var vagon2 = new VagonCarga()
	var vagon3 = new VagonPasajeros()
	var vagon4 = new VagonCarga()
	vagon1.largo(5)
	vagon1.anchoUtil(2)
	vagon2.cargaMax(1000)
	vagon3.largo(3)
	vagon3.anchoUtil(3)
	vagon4.cargaMax(10000)
	formacion1.vagonesTotal().add(vagon1)
	formacion1.vagonesTotal().add(vagon2)
	formacion2.vagonesTotal().add(vagon3)
	formacion2.vagonesTotal().add(vagon4)
	assert.equals(vagon1,formacion1.vagonMasPesado())
	assert.equals(vagon4,formacion2.vagonMasPesado())
}

test "6.2 Dado un depósito, obtener el conjunto formado por el vagón más pesado de cada formación"{
	var deposito = new Deposito()
	var formacion1 = new Formacion()
	var formacion2 = new Formacion()
	var vagon1 = new VagonPasajeros()
	var vagon2 = new VagonCarga()
	var vagon3 = new VagonPasajeros()
	var vagon4 = new VagonCarga()
	vagon1.largo(5)
	vagon1.anchoUtil(2)
	vagon2.cargaMax(1000)
	vagon3.largo(3)
	vagon3.anchoUtil(3)
	vagon4.cargaMax(10000)
	formacion1.vagonesTotal().add(vagon1)
	formacion1.vagonesTotal().add(vagon2)
	formacion2.vagonesTotal().add(vagon3)
	formacion2.vagonesTotal().add(vagon4)
	deposito.formaciones().add(formacion1)
	deposito.formaciones().add(formacion2)
	assert.equals([vagon1,vagon4],deposito.conjuntoVagones())	
}

test "7. Un depósito necesita un conductor experimentado porque formacion1 es compleja (peso total>10000)"{
	var deposito = new Deposito()
	var formacion1 = new Formacion()
	var formacion2 = new Formacion()
	var locomotora1 = new Locomotora()
	var locomotora2 = new Locomotora()
	var vagon1 = new VagonPasajeros()
	var vagon2 = new VagonCarga()
	var vagon3 = new VagonPasajeros()
	var vagon4 = new VagonCarga()
	vagon1.largo(5)
	vagon1.anchoUtil(2)
	vagon2.cargaMax(2000)
	vagon3.largo(3)
	vagon3.anchoUtil(3)
	vagon4.cargaMax(500)
	locomotora1.arrastreUtil(4000)
	locomotora1.peso(1000)
	locomotora2.arrastreUtil(2000)
	locomotora2.peso(1000)
	formacion1.vagonesTotal().add(vagon1)
	formacion1.vagonesTotal().add(vagon2)
	formacion1.locomotoras().add(locomotora1)
	formacion2.vagonesTotal().add(vagon3)
	formacion2.vagonesTotal().add(vagon4)
	formacion2.locomotoras().add(locomotora2)
	deposito.formaciones().add(formacion1)
	deposito.formaciones().add(formacion2)
	assert.that(deposito.conductorExperimentado())
}

test "8. Dentro de un depósito, a una formacion determinada se agrega una locomotora suelta para que pueda moverse"{
	var deposito = new Deposito()
	var formacion1 = new Formacion()
	var locomotora1 = new Locomotora()
	var locomotora2 = new Locomotora()
	var locomotora3 = new Locomotora()
	var locomotora4 = new Locomotora()
	var vagon1 = new VagonPasajeros()
	var vagon2 = new VagonCarga()
	locomotora1.arrastreUtil(1000)
	locomotora2.arrastreUtil(2000)
	locomotora3.arrastreUtil(500)
	locomotora4.arrastreUtil(1500)
	vagon1.largo(5)
	vagon1.anchoUtil(2)
	vagon2.cargaMax(1000)
	formacion1.vagonesTotal().add(vagon1)
	formacion1.vagonesTotal().add(vagon2)
	formacion1.locomotoras().add(locomotora1)
	formacion1.locomotoras().add(locomotora2)
	deposito.locomotorasSueltas().add(locomotora3)
	deposito.locomotorasSueltas().add(locomotora4)
	deposito.formaciones().add(formacion1)
	assert.notThat(formacion1.puedeMoverse())
	assert.equals(1360,formacion1.empuje())
	deposito.agregarLocomotoraEnFormacion(formacion1)
	assert.that(formacion1.puedeMoverse())
	assert.that(formacion1.locomotoras().contains(locomotora4))
}
